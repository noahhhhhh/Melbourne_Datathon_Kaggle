for (i in 2:len){
for (j in i:2){
if (items[j - 1] > items[j]){
items[j - 1] <- items[j - 1] + items[j]
items[j] <- items[j - 1] - items[j]
items[j - 1] <- items[j - 1] - items[j]
}
}
}
return(items)
}
InsertionSort(items)
items <- sample(10, 10, replace = T)
SelectionSort <- function(items){
len <- length(items)
listSorted <- as.numeric()
listUnsorted <- items
for (i in 1:(len - 1)){
for (j in 1:(len - i)){
if (listUnsorted[j] < listUnsorted[j + 1]){
listUnsorted[j] <- listUnsorted[j] + listUnsorted[j + 1]
listUnsorted[j + 1] <- listUnsorted[j] - listUnsorted[j + 1]
listUnsorted[j] <- listUnsorted[j] - listUnsorted[j + 1]
}
}
listSorted <- c(listSorted, listUnsorted[len - i + 1])
listUnsorted <- listUnsorted[1:(len - i)]
}
return(listSorted)
}
SelectionSort(items)
items <- sample(10, 10, replace = T)
QuickSort <- function(items){
len <- length(items)
pivot <- len
listSmaller <- as.numeric()
listLarger <- as.numberic()
if (len > 1){
for (i in 1:(len - 1)){
if (items[i] < items[len]){
listSmaller <- c(listSmaller, items[i])
} else {
listLarger <- c(listLarger, items[i])
}
}
listSmaller <- QuickSort(listSmaller)
listLarger <- QuickSort(listLarger)
return(listSmaller, items[pivot], listLarger)
}
return(listSmaller, items[pivot], listLarger)
}
QuickSort(items)
items <- sample(10, 10, replace = T)
QuickSort <- function(items){
len <- length(items)
pivot <- len
listSmaller <- as.numeric()
listLarger <- as.numeric()
if (len > 1){
for (i in 1:(len - 1)){
if (items[i] < items[len]){
listSmaller <- c(listSmaller, items[i])
} else {
listLarger <- c(listLarger, items[i])
}
}
listSmaller <- QuickSort(listSmaller)
listLarger <- QuickSort(listLarger)
return(listSmaller, items[pivot], listLarger)
}
return(listSmaller, items[pivot], listLarger)
}
QuickSort(items)
QuickSort <- function(items){
len <- length(items)
pivot <- len
listSmaller <- as.numeric()
listLarger <- as.numeric()
if (len > 1){
for (i in 1:(len - 1)){
if (items[i] < items[len]){
listSmaller <- c(listSmaller, items[i])
} else {
listLarger <- c(listLarger, items[i])
}
}
listSmaller <- QuickSort(listSmaller)
listLarger <- QuickSort(listLarger)
# return(listSmaller, items[pivot], listLarger)
}
return(listSmaller, items[pivot], listLarger)
}
QuickSort(items)
QuickSort <- function(items){
len <- length(items)
pivot <- len
listSmaller <- as.numeric()
listLarger <- as.numeric()
if (len > 1){
for (i in 1:(len - 1)){
if (items[i] < items[len]){
listSmaller <- c(listSmaller, items[i])
} else {
listLarger <- c(listLarger, items[i])
}
}
listSmaller <- QuickSort(listSmaller)
listLarger <- QuickSort(listLarger)
return(c(listSmaller, items[pivot], listLarger))
}
return(c(listSmaller, items[pivot], listLarger))
}
QuickSort(items)
items <- sample(10, 10, replace = T)
Compare <- function(left, right){
lenLeft <- length(left)
lenRight <- length(right)
listNew <- as.numeric()
i_left <- 1
i_right <- 1
for (i in 1:(lenLeft + lenRight)){
if ((left[i_left] < right[i_right] && i_left <= i_left) || i_right > lenRight){
listNew[i] <- left[i_left]
i_left <- i_left + 1
} else {
listNew[i] <- right[i_right]
i_right <- i_right + 1
}
}
return (listNew)
}
Divide <- function(items){
len <- length(items)
listLeft <- as.numeric()
listRight <- as.numeric()
if (len > 1){
listLeft <- items[1:floor(len/2)]
listRight <- items[(floor(len/2) + 1):len]
listLeft <- Divide(listLeft)
listRight <- Divide(listRight)
items <- Compare(listLeft, listRight)
}
return (items)
}
Divide(items)
items <- sample(10, 10, replace = T)
Compare <- function(left, right){
lenLeft <- length(left)
lenRight <- length(right)
listNew <- as.numeric()
i_left <- 1
i_right <- 1
for (i in 1:(lenLeft + lenRight)){
if ((left[i_left] < right[i_right] && i_left <= lenLeft) || i_right > lenRight){
listNew[i] <- left[i_left]
i_left <- i_left + 1
} else {
listNew[i] <- right[i_right]
i_right <- i_right + 1
}
}
return (listNew)
}
Divide <- function(items){
len <- length(items)
listLeft <- as.numeric()
listRight <- as.numeric()
if (len > 1){
listLeft <- items[1:floor(len/2)]
listRight <- items[(floor(len/2) + 1):len]
listLeft <- Divide(listLeft)
listRight <- Divide(listRight)
items <- Compare(listLeft, listRight)
}
return (items)
}
Divide(items)
14%%2
14%%3
FindPrime <- function(range){
list <- as.numeric()
for (i in 1:range){
flag <- 0
for (j in 2:i){
if (i %% j == 0){
flag <- flag + 1
}
}
if (flag == 1) {
list <- c(list, i)
}
}
return (list)
}
FindPrime(100)
FindFibonaci <- function(n){
f <- c(0, 1)
for (i in 3:n){
f <- f(f, f[i - 2], f[i - 1])
}
return f[n]
}
FindFibonaci <- function(n){
f <- c(0, 1)
for (i in 3:n){
f <- f(f, f[i - 2], f[i - 1])
}
return (f[n])
}
FindPrime(4)
FindFibonaci <- function(n){
f <- c(0, 1)
for (i in 3:n){
f <- f(f, f[i - 2] + f[i - 1])
}
return (f[n])
}
FindPrime(4)
FindFibonaci(4)
FindFibonaci <- function(n){
f <- c(0, 1)
for (i in 3:n){
f <- c(f, f[i - 2] + f[i - 1])
}
return (f[n])
}
FindFibonaci(4)
FindFibonaci(8)
Pyramid1 <- function(n){
for (i in 1:n){
printer <- paste(rep(" ", n - 1), rep("*", n * 2 - 1), rep(" ", n - 1))
print (printer)
}
}
Pyramid1(3)
?paste
Pyramid1 <- function(n){
for (i in 1:n){
printer <- paste(rep(" ", n - 1), rep("*", n * 2 - 1), rep(" ", n - 1), sep = "")
print (printer)
}
}
?paste
Pyramid1(3)
Pyramid1 <- function(n){
for (i in 1:n){
printer <- paste(rep(" ", n - 1), rep("*", n * 2 - 1), rep(" ", n - 1), sep = "")
cat (printer)
}
}
Pyramid1(3)
Pyramid1 <- function(n){
for (i in 1:n){
printer <- paste(rep(" ", i - 1), rep("*", i * 2 - 1), rep(" ", i - 1), sep = "")
cat (printer)
}
}
Pyramid1(3)
Pyramid1 <- function(n){
for (i in 1:n){
printer <- paste(rep(" ", i - 1), rep("*", i * 2 - 1), rep(" ", i - 1), sep = "")
print (printer)
}
}
Pyramid1(3)
Pyramid1 <- function(n){
for (i in 1:n){
printer <- paste(rep(" ", n - i + 1), rep("*", i * 2 + 1), rep(" ", i - 1), sep = "")
print (printer)
}
}
Pyramid1(3)
Pyramid1 <- function(n){
for (i in 1:n){
printer <- c(rep(" ", n - i + 1), rep("*", i * 2 + 1), rep(" ", i - 1))
print (printer)
}
}
Pyramid1(3)
Pyramid1 <- function(n){
for (i in 1:n){
printer <- c(rep(" ", n - i + 1), rep("*", i * 2 - 1), rep(" ", n - i + 1))
print (printer)
}
}
Pyramid1(3)
Pyramid2 <- function(n){
for (i in 1:n){
for (sp in (n - i):1){
printSpace <- rep(" ", sp)
}
for (st in 1:i){
printStar <- rep("* ", st)
}
print c(printSpace, printStar)
}
}
Pyramid2 <- function(n){
for (i in 1:n){
for (sp in (n - i):1){
printSpace <- rep(" ", sp)
}
for (st in 1:i){
printStar <- rep("* ", st)
}
print (c(printSpace, printStar))
}
}
Pyramid2(3)
Pyramid2(4)
Pyramid2 <- function(n){
for (i in 1:n){
printSpace <- rep(" ", (n - i))
printStar <- rep("* ", i)
print (c(printSpace, printStar))
}
}
Pyramid2(4)
c(" ", "* ")
Pyramid2 <- function(n){
for (i in 1:n){
printSpace <- rep(" ", (n - i))
printStar <- rep("* ", i)
print (paste(printSpace, printStar, sep = ""))
}
}
Pyramid2(4)
paste(" ", "* ", "* ", sep = "")
print(paste(" ", "* ", "* ", sep = ""))
rep("* ", 3)
"* " * 3
GenPrint <- function(char, rep){
output <- as.character()
for (i in 1:rep){
output <- paste(output, char, sep = "")
}
return (output)
}
Pyramid2 <- function(n){
for (i in 1:n){
printSpace <- GenPrint(" ", (n - i))
printStar <- GenPrint("* ", i)
print (paste(printSpace, printStar, sep = ""))
}
}
Pyramid2(4)
GenPrint <- function(char, rep){
output <- as.character()
if (rep >= 1){
for (i in 1:rep){
output <- paste(output, char, sep = "")
}
} else if {
output <- char
}
return (output)
}
Pyramid2 <- function(n){
for (i in 1:n){
printSpace <- GenPrint(" ", (n - i))
printStar <- GenPrint("* ", i)
print (paste(printSpace, printStar, sep = ""))
}
}
GenPrint <- function(char, rep){
output <- as.character()
if (rep >= 1){
for (i in 1:rep){
output <- paste(output, char, sep = "")
}
} else {
output <- char
}
return (output)
}
Pyramid2 <- function(n){
for (i in 1:n){
printSpace <- GenPrint(" ", (n - i))
printStar <- GenPrint("* ", i)
print (paste(printSpace, printStar, sep = ""))
}
}
GenPrint <- function(char, rep){
output <- as.character()
if (rep >= 1){
for (i in 1:rep){
output <- paste(output, char, sep = "")
}
} else if (rep == 1) {
output <- char
}
return (output)
}
Pyramid2 <- function(n){
for (i in 1:n){
printSpace <- GenPrint(" ", (n - i))
printStar <- GenPrint("* ", i)
print (paste(printSpace, printStar, sep = ""))
}
}
Pyramid2(4)
Pyramid2(10)
getwd()
setwd("/Volumes/Data Science/Google Drive/data_science_competition/melbourne_datathon/Melbourne_Datathon_Kaggle/")
rm(list = ls()); gc()
require(data.table)
require(plyr)
require(dplyr)
require(caret)
require(caTools)
load("../Datathon_Full_Dataset/trainData_less.RData")
load("../Datathon_Full_Dataset/valid1Data_less.RData")
load("../Datathon_Full_Dataset/valid2Data_less.RData")
load("../Datathon_Full_Dataset/testData_less.RData")
# dtTestFeatures <- fread("../data_files/semi_and_final_features.csv")
dtSampleSubmit <- fread("../data_files/sample_submission_bet_size.csv")
dtSampleSubmit[, Prediction := NULL]
setnames(dtSampleSubmit, "Account_ID")
require(xgboost)
require(Ckmeans.1d.dp)
x.train <- model.matrix(PRED ~., dt.train[, !c("ACCOUNT_ID"), with = F])[, -1]
y.train <- dt.train$PRED
dmx.train <- xgb.DMatrix(data =  x.train, label = y.train)
x.valid1 <- model.matrix(PRED ~., dt.valid1[, !c("ACCOUNT_ID"), with = F])[, -1]
y.valid1 <- dt.valid1$PRED
dmx.valid1 <- xgb.DMatrix(data =  x.valid1, label = y.valid1)
x.valid2 <- model.matrix(PRED ~., dt.valid2[, !c("ACCOUNT_ID"), with = F])[, -1]
y.valid2 <- dt.valid2$PRED
dmx.valid2 <- xgb.DMatrix(data =  x.valid2, label = y.valid2)
x.test <- model.matrix(~., dt.test[, !c("ACCOUNT_ID"), with = F])[, -1]
library(doMC)
install.packages("doMC")
?detectCores
detectCores()
library(parallel)
detectCores()
cores <- detectCores()
library(doParallel)
cl <- makeCluster(cores)
?train
require(randomForest)
trControl <- trainControl(method='cv', seeds=seeds, index=createFolds(iris$Species))
cores <- detectCores()
cl <- makeCluster(cores)
registerDoParallel(cl)
md.rf <- train(x = x.train
, y = y.train
, method = "rf"
, ntree = 1000
, mtry = floor(sqrt(ncol(x.train)))
, replace = T
, nodesize = 100
, importance = T)
stopCluster(cl)
apply(x.train, 2, function(x){sum(is.na(x))})
require(randomForest)
trControl <- trainControl(method='cv', seeds=seeds, index=createFolds(iris$Species))
cores <- detectCores()
cl <- makeCluster(cores)
registerDoParallel(cl)
md.rf <- train(PRED ~.
, data = dt.train[, !c("ACCOUNT_ID"), with = F]
, method = "rf"
, ntree = 1000
, mtry = floor(sqrt(ncol(x.train)))
, replace = T
, nodesize = 100
, importance = T)
stopCluster(cl)
summary(x.train)
summary(y.train)
cores <- detectCores()
require(foreach)
cores <- detectCores()
cl <- makeCluster(cores)
registerDoParallel(cl)
set.seed(1)
md.rf <- foreach(ntree = rep(250, 4)
, .combine = combine
, .packages = "randomForest") %dopar%
randomForest(x = x.train
, y = y.train
, xtest = x.valid2
, ytest = y.valid2
, ntree = ntree
, mtry = floor(sqrt(ncol(x.train)))
, replace = T
, nodesize = 100
, importance = T
)
stopCluster(cl)
setwd("/Volumes/Data Science/Google Drive/data_science_competition/melbourne_datathon/Melbourne_Datathon_Kaggle/")
rm(list = ls()); gc()
###########################################################################################
## preprocess #############################################################################
###########################################################################################
setwd("/Volumes/Data Science/Google Drive/data_science_competition/melbourne_datathon/Melbourne_Datathon_Kaggle/")
rm(list = ls()); gc()
require(data.table)
require(dplyr)
require(caret)
# load("../Datathon_Full_Dataset/transformedData.RData")
# load("../Datathon_Full_Dataset/transformed_non_overlap_Data.RData")
load("../Datathon_Full_Dataset/transformed_union_Data.RData")
# load("../Datathon_Full_Dataset/transformed_more_union_Data.RData")
is.dup <- duplicated(dt.3in1[, c("UNIT", "ACCOUNT_ID"), with = F])
dt.3in1 <- dt.3in1[!is.dup, with = T]
#######################################
## 1.0 centre and scale ###############
#######################################
prep.centreScale <- preProcess(dt.3in1[, !c("ACCOUNT_ID"), with = F]
, verbose = T)
